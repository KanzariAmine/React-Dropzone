{"version":3,"sources":["components/DropZone.js","App.js","serviceWorker.js","index.js"],"names":["DropZone","inputRef","useRef","useState","hover","setHover","fileList","setFileList","stopEvent","event","preventDefault","stopPropagation","fileListArray","files","file","extensionFile","url","createObjectURL","extention","name","split","pop","window","webkitURL","URL","className","onClick","current","click","onDragOver","onDragLeave","onDrop","dataTransfer","filesURL","ref","type","multiple","length","map","key","size","src","alt","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAoHeA,MA/Gf,WAEE,IAAMC,EAAWC,mBAFC,EAIOC,oBAAS,GAJhB,mBAIXC,EAJW,KAILC,EAJK,OAKcF,mBAAS,IALvB,mBAKXG,EALW,KAKDC,EALC,KAaZC,EAAY,SAAAC,GAChBA,EAAMC,iBACND,EAAME,mBAyBFC,EAAgB,SAAAC,GAAU,IAAD,uBAC7B,IAAI,IAAJ,IAAgBA,EAAhB,+CAAsB,CAAC,IAAfC,EAAc,QAEpB,OADAC,EAAcD,GACPA,GAHoB,oFAOzBC,EAAgB,SAAAD,GAEpB,IAAIE,EAAMC,EAAgBH,GACtBI,EAAYJ,EAAKK,KAAKC,MAAM,KAAKC,MAErC,OADAP,EAAI,UAAgBI,EACbJ,EAAKI,WACV,IAAK,MACH,OAAQJ,EAAI,IAAU,iBACxB,IAAK,OACH,OAAQA,EAAI,IAAU,mBACxB,IAAK,OACH,OAAQA,EAAI,IAAU,wBACxB,IAAK,OACH,OAAQA,EAAI,IAAU,kBACxB,QACE,OAAQA,EAAI,IAAUE,IAKtBC,EAAkB,SAAAH,GACtB,OAAGQ,OAAOC,UACDD,OAAOC,UAAUN,gBAAgBH,GACjCQ,OAAOE,KAAOF,OAAOE,IAAIP,gBACzBK,OAAOE,IAAIP,gBAAgBH,GAE3B,MAGX,OACE,oCACA,yBACEW,UAAWrB,EAAS,4BAA8B,sBAClDsB,QAxEmB,WACrBzB,EAAS0B,QAAQC,SAwEfC,WA/De,SAACpB,GAElBD,EAAUC,GACVJ,GAAS,IA6DPyB,YA1DgB,SAACrB,GAEnBD,EAAUC,GACVJ,GAAS,IAwDP0B,OApDW,SAACtB,GACdD,EAAUC,GACV,IAAII,EAAQJ,EAAMuB,aAAanB,MAC3BoB,EAAWrB,EAAcC,GAE7BN,EAAY,GAAD,mBAAKD,GAAL,CAAe2B,OAkDxB,sDAEE,2BAAOC,IAAKjC,EAAUkC,KAAK,OAAOC,UAAQ,MAI9C,yBAAKX,UAAU,cACb,4BAEInB,EAAS+B,OAAS/B,EAASgC,KAAK,SAAAxB,GAAI,OAClC,wBAAIyB,IAAKzB,EAAK0B,MACZ,yBACEC,IAAK3B,EAAKE,IACV0B,IAAK5B,EAAKK,WAId,S,MC/FGwB,MATf,WACE,OACE,yBAAKlB,UAAU,OAEb,kBAAC,EAAD,QCIcmB,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33c5f965.chunk.js","sourcesContent":["import React,{useRef, useState} from 'react'\r\nimport './DropZone.css'\r\n\r\n\r\n\r\nfunction DropZone() {\r\n  /**Create REf for the input  */\r\n  const inputRef = useRef();\r\n\r\n  const [hover,setHover] = useState(false);\r\n  const [fileList, setFileList] = useState([])\r\n  \r\n  /**openDialogFile: Function to open dialog file. */\r\n  const openDialogFile = () =>{\r\n    inputRef.current.click();\r\n  }\r\n\r\n  /**StopEvent: Add this function in all event for drag && drop */\r\n  const stopEvent = event => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  const onDragOver = (event) =>{\r\n    // console.log('Drag Hover');\r\n    stopEvent(event);\r\n    setHover(true)\r\n  }\r\n\r\n  const onDragLeave = (event) =>{\r\n    // console.log('Drag Leave');\r\n    stopEvent(event);\r\n    setHover(false);\r\n  }\r\n\r\n  /**Get the item dropped on a valid target */\r\n  const onDrop = (event) =>{\r\n    stopEvent(event);\r\n    let files = event.dataTransfer.files;\r\n    let filesURL = fileListArray(files);\r\n   \r\n    setFileList([...fileList, filesURL])\r\n  };\r\n\r\n  /**Extract the coming data in simple array */\r\n  const fileListArray = files => {\r\n    for(let file of files){\r\n      extensionFile(file);\r\n      return file;\r\n    }\r\n  }\r\n\r\n  const extensionFile = file => {\r\n\r\n    let url = createObjectURL(file)\r\n    let extention = file.name.split('.').pop();\r\n    file[\"extention\"] = extention;\r\n    switch(file.extention){\r\n      case 'pdf':\r\n        return  file[\"url\"] = 'assets/pdf.png';\r\n      case 'xlsx':\r\n        return  file[\"url\"] = 'assets/excel.png';\r\n      case 'pptx':\r\n        return  file[\"url\"] = 'assets/powerpoint.png';\r\n      case 'docx':\r\n        return  file[\"url\"] = 'assets/word.png';\r\n      default:\r\n        return  file[\"url\"] = url;\r\n    }\r\n  }\r\n  \r\n  /**Transforme the file in URL to display it in Browser */\r\n  const createObjectURL = file =>{\r\n    if(window.webkitURL){\r\n      return window.webkitURL.createObjectURL(file)\r\n    }else if(window.URL && window.URL.createObjectURL){\r\n      return window.URL.createObjectURL(file);\r\n    }else{\r\n      return null;\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    <div \r\n      className={hover ?  \"drop-zone-container hover\" : \"drop-zone-container\"} \r\n      onClick={openDialogFile} \r\n      onDragOver={onDragOver} \r\n      onDragLeave={onDragLeave} \r\n      onDrop={onDrop}\r\n      >\r\n      \r\n      <label>\r\n        Drag files to upload\r\n        <input ref={inputRef} type=\"file\" multiple/>\r\n      </label>\r\n\r\n    </div>\r\n    <div className=\"image_list\">\r\n      <ul>\r\n        {\r\n          fileList.length ? fileList.map( file => \r\n            <li key={file.size}>\r\n              <img  \r\n                src={file.url} \r\n                alt={file.name}\r\n              />\r\n            </li>          \r\n          )\r\n          : null\r\n        }\r\n      </ul>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DropZone\r\n","import React from 'react';\nimport DropZone from './components/DropZone';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <DropZone/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}